# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.41
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import to_back.ecotaxa_cli_py
from to_back.ecotaxa_cli_py.models.collection_aggregated_rsp import CollectionAggregatedRsp  # noqa: E501
from to_back.ecotaxa_cli_py.rest import ApiException

class TestCollectionAggregatedRsp(unittest.TestCase):
    """CollectionAggregatedRsp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CollectionAggregatedRsp
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = to_back.ecotaxa_cli_py.models.collection_aggregated_rsp.CollectionAggregatedRsp()  # noqa: E501
        if include_optional :
            return CollectionAggregatedRsp(
                can_be_administered = True, 
                instrument = '?', 
                access = 2, 
                initclassiflist = '0', 
                classiffieldlist = '0', 
                cnn_network_id = '0', 
                status = '0', 
                creator_users = [
                    to_back.ecotaxa_cli_py.models.min_user_model.MinUserModel(
                        id = 1, 
                        email = 'ecotaxa.api.user@gmail.com', 
                        name = 'userName', 
                        organisation = 'Oceanographic Laboratory of Villefranche sur Mer - LOV', )
                    ], 
                privileges = {"managers":[],"annotators":[],"viewers":[]}, 
                freecols = {"mappingobj":{"n01":"annotation_confidencepmax"},"mappingsample":{"t01":"cruise","t02":"vessel","t03":"barcode"},"mappingprocess":{},"mappingacq":{}}, 
                excluded = {"status":[1,5,12],"access":[1]}
            )
        else :
            return CollectionAggregatedRsp(
                initclassiflist = '0',
                classiffieldlist = '0',
                cnn_network_id = '0',
                status = '0',
        )

    def testCollectionAggregatedRsp(self):
        """Test CollectionAggregatedRsp"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
